# 1. Initialize project
  pnpm init

  # 2. Install Nx
  pnpm install nx

  # 3. Initialize Nx workspace
  nx init

  # 4. Install Next.js plugin
  pnpm install @nx/next

  # 5. Generate Next.js app
  npx nx generate @nx/next:app hotel-frontend

  # 6. Serve Next.js app
  npx nx serve hotel-frontend

  # 7. Remove libs folder (after initial mistake)
  npx nx g @nx/workspace:remove libs

  # 7.1 Add "npmScope": "hotel_manage", in nx.json

  # 8. Generate config library
  npx nx generate @nx/js:library config --directory=libs/config

  # 9. Generate db-access library
  npx nx generate @nx/js:library db-access --directory=libs/db-access

  # 10. Install dotenv library
  pnpm install dotenv

  # 11. Create .env.development.local & env.production.local files
  
  # 12. Add .env*.local in .gitignore file
  
  # 13. Add "tui": { "enabled": false }, in nx.json

  # 14. Develop db-access library using TDD
  # Test it with: npx nx test db-access --watch

  # 15. Generate logging library
  npx nx generate @nx/js:library logging --directory=logging

  # 16. Generate shared-models library
  npx nx generate @nx/js:library shared-models --directory=shared-models

  # 17. Generate utils library
  npx nx generate @nx/js:library utils --directory=utils

  # 18. Generate scripts library
  npx nx generate ????

  # Run script that Creates the  Database from Sequelize Models
  nx run scripts:db:create

  # Generate libraries with proper tags:
  
  # Assets library (images, fonts, static resources)
  npx nx generate @nx/js:library assets --directory=lib/assets --tags type:assets,scope:hotel_management
  
  # Auth-options library (authentication configuration)
  npx nx generate @nx/js:library auth-options --directory=lib/auth-options --tags type:config,scope:hotel_management

  # Config library (application configuration)
  npx nx generate @nx/js:library config --directory=lib/config --tags type:config,scope:hotel_management

  # DB-access library (database access and ORM)
  npx nx generate @nx/js:library db-access --directory=lib/db-access --tags type:data,scope:hotel_management

  # Logging library (logging utilities)
  npx nx generate @nx/js:library logging --directory=lib/logging --tags type:util,scope:hotel_management

  # React-Hooks library (custom React hooks)
  npx nx generate @nx/js:library react-hooks --directory=lib/react-hooks --tags type:util,scope:hotel_management

  # Shared-models library (TypeScript interfaces and types)
  npx nx generate @nx/js:library shared-models --directory=lib/shared-models --tags type:data,scope:hotel_management

  # UI library (React components and styling)
  nx g @nx/react:library ui --directory lib/ui --tags type:ui,scope:hotel_management
  
  # Utils library (general utility functions)
  npx nx generate @nx/js:library utils --directory=lib/utils --tags type:util,scope:hotel_management

  # Scripts library (build tools and database scripts)
  npx nx generate @nx/js:library scripts --directory=scripts --tags type:tool,scope:hotel_management


  # UI-Theme library 
  npx nx generate @nx/js:library ui-theme --directory=lib/ui-theme --tags type:ui,scope:hotel_management --dry-run


  # Context library 
  npx nx generate @nx/js:library contexts --directory=lib/contexts --tags type:util,scope:hotel_management --dry-run


 # Context library 
  npx nx generate @nx/js:library contexts --directory=lib/contexts --tags type:util,scope:hotel_management --dry-run

# Server Actions
 nx g @nx/js:library server-actions --directory lib/server-actions --tags type:server,scope:hotel_management

# =============================================================================
# NX COMMANDS WITH TAGS
# =============================================================================

  # Run commands by type:
  # =====================
  
  # Test only data-related libraries (db-access, shared-models)
  nx run-many --target=test --projects=tag:type:data

  # Test only utility libraries (logging, react-hooks, utils)
  nx run-many --target=test --projects=tag:type:util

  # Build only configuration libraries (config, auth-options)
  nx run-many --target=build --projects=tag:type:config

  # Lint only UI libraries
  nx run-many --target=lint --projects=tag:type:ui

  # Test only tool/script libraries
  nx run-many --target=test --projects=tag:type:tool

  # Build all asset libraries
  nx run-many --target=build --projects=tag:type:assets

  # Run commands by scope:
  # =====================
  
  # Run tests for all hotel_management libraries
  nx run-many --target=test --projects=tag:scope:hotel_management

  # Build all hotel_management libraries  
  nx run-many --target=build --projects=tag:scope:hotel_management

  # Lint all hotel_management projects
  nx run-many --target=lint --projects=tag:scope:hotel_management

  # Combined tag filtering:
  # ======================
  
  # Test only hotel_management data libraries
  nx run-many --target=test --projects=tag:type:data,tag:scope:hotel_management

  # Build only hotel_management utility libraries
  nx run-many --target=build --projects=tag:type:util,tag:scope:hotel_management

# =============================================================================
# COMMON DEVELOPMENT COMMANDS
# =============================================================================

  # Development workflows:
  # =====================

  # Run all tests
  nx run-many --all --target=test

  # Run all tests in watch mode
  nx run-many --all --target=test --watch

  # Build all libraries
  nx run-many --all --target=build

  # Lint all projects
  nx run-many --all --target=lint

  # Serve the frontend application
  nx serve hotel-frontend

  # Serve frontend with turbo (faster builds)
  nx serve hotel-frontend --turbo

  # Run database creation script
  nx run scripts:db:create

  # Show project dependency graph
  nx graph

  # Show projects with specific tags
  nx show projects --projects=tag:type:data
  nx show projects --projects=tag:scope:hotel_management

  # Show affected projects (after code changes)
  nx affected:test
  nx affected:build
  nx affected:lint

# =============================================================================
# LIBRARY TAG STRUCTURE
# =============================================================================

  Current tagging structure:
  
  üìÅ Type Tags:
  - type:assets      ‚Üí Static resources (images, fonts, etc.)
  - type:config      ‚Üí Configuration libraries  
  - type:data        ‚Üí Data models and database access
  - type:ui          ‚Üí UI components and styling
  - type:util        ‚Üí Utility functions and helpers
  - type:tool        ‚Üí Build tools and scripts

  üè¢ Scope Tags:
  - scope:hotel_management ‚Üí All hotel management related code

  üìä Current Library Classifications:
  - assets         ‚Üí type:assets,  scope:hotel_management
  - auth-options   ‚Üí type:config,  scope:hotel_management  
  - config         ‚Üí type:config,  scope:hotel_management
  - db-access      ‚Üí type:data,    scope:hotel_management
  - logging        ‚Üí type:util,    scope:hotel_management
  - react-hooks    ‚Üí type:util,    scope:hotel_management
  - shared-models  ‚Üí type:data,    scope:hotel_management
  - ui             ‚Üí type:ui,      scope:hotel_management
  - utils          ‚Üí type:util,    scope:hotel_management
  - scripts        ‚Üí type:tool,    scope:hotel_management

# =============================================================================
# PROJECT STRUCTURE
# =============================================================================

  Current project structure:
  - ‚úÖ Nx workspace with proper tagging system
  - ‚úÖ Next.js app (hotel-frontend) with Turbo support
  - ‚úÖ 10 libraries with proper type and scope tags
  - ‚úÖ Comprehensive test coverage (115+ tests)
  - ‚úÖ Database access library with Sequelize models
  - ‚úÖ Logging library with Winston and daily rotation
  - ‚úÖ Configuration management for dev/prod environments
  - ‚úÖ Asset management library
  - ‚úÖ Authentication options setup
  - ‚úÖ Shared TypeScript models and types
  - ‚úÖ UI component library ready for development
  - ‚úÖ Custom React hooks library
  - ‚úÖ Database creation and management scripts